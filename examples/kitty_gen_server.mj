# from http://learnyousomeerlang.com/
behavior gen_server

def start():
      gen_server::start_link((:local, __name__), __name__, [], [])


def checkout(who, book):
    gen_server::call(__name__, (:checkout, who, book))


def lookup(book):
    gen_server::call(__name__, (:lookup, book))


def return(book):
    gen_server::call(__name__, (:return, book))


# This is called when a connection is made to the server
def init([]):
    library = dict::"new"()
    (:ok, library)


# handle_call is invoked in response to gen_server:call
def handle_call((:checkout, who, book), _from, library):
    response = if dict::is_key(book, library):
        new_library = library
        (:already_checked_out, book)
    else:
        new_library = dict::append(book, who, library)
        :ok
    (:reply, response, new_library)


def handle_call((:lookup, book), _from, library):
    response = if dict::is_key(book, library):
        (:who, lists::nth(1, dict::fetch(book, library)))
    else:
        (:not_checked_out, book)
    (:reply, response, library)


def handle_call((:return, book), _from, library):
    new_library = dict::erase(book, library)
    (:reply, :ok, new_library)


def handle_call(_message, _from, library):
    (:reply, :error, library)


# We get compile warnings from gen_server unless we define these
def handle_cast(_message, library):
    (:noreply, library)


def handle_info(_message, library):
    (:noreply, library)


def terminate(_reason, _library):
    :ok


def code_change(_old_version, library, _extra):
    (:ok, library)

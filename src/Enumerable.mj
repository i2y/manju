def select(self, func):
    _select = lambda item, acc:
        if func.(item):
            acc ++ [item]
        else:
            acc

    self.reduce([], _select)

def filter(self, func):
    _filter = lambda item, acc:
        if func.(item):
            acc ++ [item]
        else:
            acc
    
    self.reduce([], _filter)

def reject(self, func):
    _reject = lambda item, acc:
        if func.(item):
            acc
        else:
            acc ++ [item]
    
    self.reduce([], _reject)

def map(self, func):
    _map = lambda item, acc:
        acc ++ [func.(item)]
    
    self.reduce([], _map)

def collect(self, func):
    _collect = lambda item, acc:
        acc ++ [func.(item)]

    self.reduce([], _collect)

def min(self, func):
    _min = lambda item, acc:
        match func.(acc, item):
            case -1:
                0
            case 0:
                0
            case 1:
                item
    
    self.reduce('infinity', _min)

def min(self):
    _min = lambda item, acc:
        if acc <= item:
            acc
        else:
            item
    
    self.reduce('infinity', _min)

def unique(self):
    _unique = lambda item, acc:
        if acc.index_of(item):
            acc
        else:
            acc ++ [item]
    
    self.reduce([], _unique)

def each(self, func):
    _each = lambda item, acc:
        func.(item)
    
    self.reduce([], _each)
